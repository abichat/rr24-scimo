---
format: 
  servier-revealjs:
    footer: "Rencontres R 2024"
    slide-number: c
execute: 
  echo: true
  warning: true
filters:
  - reveal-auto-agenda
---

```{r}
#| echo: false
options(width = 110, pillar.min_chars = 15, pillar.max_footer_lines = 4)
set.seed(1234)
```


## Créer son package d'extension {recipes} : retex de [{scimo}]{.tangerine} {.servier-title-long}

Rencontres R 2024

Antoine Bichat

13 juin

Vannes


![](img/logo_scimo.png){.absolute top="350" right="50" width="200" height="231"}


# Intro

## Présentation


:::: {.columns}
::: {.column width="80%"}

<br>

Data scientist @ Servier

* Analyses exploratoires

* Oncologie, cancers pédiatriques

* R, packages, applications shiny

<br>

Tutoriel aux Rencontres R 2023

[Créer un pipeline de machine learning complet avec {tidymodels}](https://abichat.github.io/rr23-tuto-tidymodels/)
:::

::: {.column width="20%"}
<img class="circular-square" src="img/ab.jpg" />

![](img/logo_servier.png)
:::
::::

## Notes

<br>

::: {.callout-note}

## Science ouverte

`scimo` est un package développé sur mon temps personnel, et non pour le compte de mon employeur. 

:::


<br>

::: {.callout-tip}

## Blocs de code

Il y aura beaucoup de code dans cette présentation, mais il n'est pas nécesssaire de regarder en détail à la première lecture.

:::

## Les manchots de Palmer

![](img/logo_palmer.png){.absolute bottom="30" right="10" width=100 height=116}

```{r}
#| message: false
library(tidyverse)
library(palmerpenguins)

penguins
```

# Prétraitement

## tidymodels

> {tidymodels} est une collection de packages pour la modélisation et l'apprentissage statistique qui repose sur les principes du tidyverse.

:::: {.columns}

::: {.column width="15%"}

:::

::: {.column width="70%"}
![](img/core_tidymodels.png)
:::

::: {.column width="15%"}

:::

::::


## Ma première recette

> Une recette est un objet qui définit les rôles et les étapes de prétraitement de nos données.

<br>

```{r}
#| message: false
#| echo: false
library(recipes)
```

```{r}
library(recipes)

penguins %>% 
  recipe(flipper_length_mm ~ .)
```

## Étapes

```{r}
penguins %>% 
  recipe(flipper_length_mm  ~ .) %>% 
  step_impute_mean(all_numeric_predictors(), -year) %>% 
  step_normalize(all_numeric_predictors(), -year) %>% 
  step_pca(all_numeric_predictors(), -year, num_comp = 2)
```


## Estimation


```{r}
penguins %>% 
  recipe(flipper_length_mm  ~ .) %>% 
  step_impute_mean(all_numeric_predictors(), -year) %>% 
  step_normalize(all_numeric_predictors(), -year) %>% 
  step_pca(all_numeric_predictors(), -year, num_comp = 2) %>% 
  prep()
```


## Application


```{r}
penguins %>% 
  recipe(flipper_length_mm  ~ .) %>% 
  step_impute_mean(all_numeric_predictors(), -year) %>% 
  step_normalize(all_numeric_predictors(), -year) %>% 
  step_pca(all_numeric_predictors(), -year, num_comp = 2) %>% 
  prep() %>% 
  bake(new_data = NULL)
```


## Informations


```{r}
penguins %>% 
  recipe(flipper_length_mm  ~ .) %>% 
  step_impute_mean(all_numeric_predictors(), -year) %>% 
  step_normalize(all_numeric_predictors(), -year) %>% 
  step_pca(all_numeric_predictors(), -year, num_comp = 2) %>% 
  prep() %>% 
  tidy(2)
```


# Données omiques

## -omique {{< fa dna >}}

> Les données omiques sont des jeux de données **larges** obtenus par séquençage haut-débit et utilisés pour comprendre des **systèmes biologiques complexes**.

<br>

:::: {.columns}

::: {.column width="50%"}
* **Génomique** : mutations, fusions... des gènes

* **Transcriptomique** : expression des gènes

* **Protéomique** : quantification des protéines

* **Métagénomique** : abondance des micro-organismes

* ...
:::


::: {.column width="50%"}

::: {.center-h}
Jeu de données multi-omique chez l'humain
:::

![](img/omics.png)

:::

::::




## Besoin d'un prétratement adapté

* Étapes de [selection]{.tangerine} de variables :

  * conserver les gènes avec le plus de variabilité,
  
  * conserver les gènes significativement associés avec la réponse.
  
* Étapes d'[agrégation]{.tangerine} de variables :

  * calculer l'activité de voies biologiques,
  
  * additioner les abondances appartenant à un même clade.

* Étapes de [normalisation]{.tangerine} de variables :

  * convertir des comptes en proportions.
  
* Étapes de [génération]{.tangerine} de variables :

  * réduire la dimension pour des distributions particulières,
  
  * extraire des clades à partir de lignées.


## `{scimo}`

```{r}
#| message: false
library(scimo)
```

`{scimo}` fournit des étapes de prétraitement supplémentaires dédiées aux données omiques, mais pouvant également être utilisées dans d'autres cas. 

<br>


:::: {.columns}

::: {.column width="15%"}

:::

::: {.column width="20%"}


[![](img/logo_scimo.png)]{.center-h}



[[![](img/checks.svg)](https://github.com/abichat/scimo/actions/workflows/R-CMD-check.yaml) [![](img/cran.svg)](https://CRAN.R-project.org/package=scimo)]{.center-h}

:::

::: {.column width="15%"}

:::

::: {.column width="50%"}

`step_select_cv()`

`step_select_wilcoxon()`

`step_aggregate_list()`

`step_rownormalize_tss()`

`step_taxonomy()`

...

:::

::::

## `pedcan_expression`

Expression génique de 108 lignées cellulaires pour 5 cancers pédiatriques différents.

```{r}
data("pedcan_expression")
pedcan_expression
```


# Créer sa première étape

## Coefficient de variation

Les données omiques sont généralement très **larges**. Pour `pedcan_expression`, $p \approx 20000 \gg n \approx 100$.

<br>

Nous voulons une étape qui conserve 10% des variables qui ont les plus hauts coefficients de variation.

$$\mathrm{CV} = \frac{\sigma}{\left|\mu\right|}$$
```{r}
#| eval: false
cv <- function(x, na.rm = TRUE) {
  sd(x, na.rm = na.rm) / abs(mean(x, na.rm = na.rm))
}
```


## `step_select_cv()` en action

```{r}
rec_cv <-
  # recipe(disease ~ ., data = pedcan_expression) %>%  # trop de variables pour une formule
  recipe(pedcan_expression) %>%                        # <- astuce pour éviter un débordement de pile
  update_role(disease, new_role = "output") %>%        #    bientôt résolu dans une future version de recipes
  update_role(-disease, new_role = "predictor") %>%    #
  step_select_cv(all_numeric_predictors(), prop_kept = 0.1) %>% 
  prep()
```

. . .

<div style = "margin-top: 1em"></div>

:::: {.columns}

::: {.column width="55%"}

```{r}
#| echo: false
options(width = 60, pillar.min_chars = 5)
```

```{r}
bake(rec_cv, new_data = NULL)
```
:::

::: {.column width="5%"}
<!-- empty column to create gap -->
:::

::: {.column width="40%"}

```{r}
#| echo: false
options(width = 110, pillar.min_chars = 15)
```

```{r}
tidy(rec_cv, 1)
```
:::

::::


## Interface utilisateur : `step_select_cv()`

```{r}
#| eval: false
step_select_cv <- function(recipe, ..., role = NA, trained = FALSE,
                           n_kept = NULL, prop_kept = NULL,
                           cutoff = NULL, res = NULL,
                           skip = FALSE, 
                           id = rand_id("select_cv")) { 

  add_step(                        # Ajouter une nouvelle étape à une recette existante
    recipe,
    step_select_cv_new(            # Les arguments sont hérités tels quels
      terms = enquos(...),
      role = role,                 
      trained = trained,           # trained = FALSE
      n_kept = n_kept,
      prop_kept = prop_kept,
      cutoff = cutoff,
      res = res,                   # res = NULL à mettre à jour plus tard
      skip = skip,
      id = id                      # id aléatoire
    )
  )
}
```


## Création de l'étape : `step_select_cv_new()`

```{r}
#| eval: false
step_select_cv_new <- function(terms, role, trained,
                               n_kept, prop_kept, cutoff,
                               res, skip, id) {

  step(
    subclass = "select_cv",  # Spécification de la classe pour dispatcher aux futures méthodes
    terms = terms,           # Les arguments sont hérités tels quels
    role = role,
    trained = trained,       
    n_kept = n_kept,
    prop_kept = prop_kept,
    cutoff = cutoff,
    res = res,
    skip = skip,
    id = id
  )
}
```

## Calculs : `prep.step_select_cv()`

```{css, echo=FALSE}
.reveal code {
  max-height: 100% !important;
}
```


```{r}
#| code-line-numbers: "1-27|3-4|8-12|16-26"
#| eval: false
prep.step_select_cv <- function(x, training, info = NULL, ...) {
  
  col_names <- recipes_eval_select(x$terms, training, info)    # x est la liste des arguments de l'étape
  check_type(training[, col_names], quant = TRUE)              # Vérification des variables

  #####
  
  res_cv <-                                  # Calculs
    training[, col_names] %>%                #  Un tibble à 3 colonnes :
    apply(2, cv) %>%                         #  variables, CVs et s'il faut les garder ou non
    enframe(name = "terms", value = "cv") %>%
    mutate(kept = var_to_keep(.data$cv, x$n_kept, x$prop_kept, x$cutoff, maximize = TRUE))

  #####
  
  step_select_cv_new(    # Mettre à jour l'étape dans la recette
    terms = x$terms,     # La plupart des arguments sont hérités tels quels
    role = x$role,
    trained = TRUE,      # Cette étape est maintenant entrainée
    n_kept = x$n_kept,
    prop_kept = x$prop_kept,
    cutoff = x$cutoff,
    res = res_cv,        # Résultat à conserver pour plus tard
    skip = x$skip,
    id = x$id
  )
}
```

## Application : `bake.step_select_cv()`

```{r}
#| code-line-numbers: "1-18|3-4|8-13|17"
#| eval: false
bake.step_select_cv <- function(object, new_data, ...) {
  
  col_names <- object$res$terms                # object est la liste des arguments de l'étape
  check_new_data(col_names, object, new_data)  # Vérification des variables

  #####
  
  col_to_remove <-            # Calculs
    object$res %>%            #  on retire les colones non désirées
    filter(!.data$kept) %>%
    pull(.data$terms)

  new_data[col_to_remove] <- NULL
  
  #####

  new_data # On renvoie le jeu de données mis à jour
}
```

## Récupérer les informations : `tidy.step_select_cv()`

```{r}
#| code-line-numbers: "1-18|4|6-13|16-17"
#| eval: false
tidy.step_select_cv <- function(x, ...) {
  
  if (is_trained(x)) {
    res <- x$res                       # res contient les informations nécessaires
  } else {
    term_names <- sel2char(x$terms)
    res <-
      tibble(
        terms = term_names,            # Renvoie NA quand la recette n'est pas entrainée
        cv = rlang::na_dbl,
        rank = rlang::na_dbl,
        kept = rlang::na_lgl
      )
  }

  res$id <- x$id                       # Ajoute l'identifiant aléatoire
  res
}
```

## Affichage : `print.step_select_cv()`

```{r}
#| eval: false
print.step_select_cv <- function(x, width = max(20, options()$width - 35), ...) {
  
  title <- "Top CV filtering on "

  print_step(
    tr_obj = x$res$terms,
    untr_obj = x$terms,
    trained = x$trained,
    title = title,
    width = width
  )
  
  invisible(x)
}
```


## Méthodes à importer

Pour gérer correctement le `NAMESPACE`

```{r}
#| eval: false
#' @keywords internal
"_PACKAGE"

## usethis namespace: start
#' @importFrom generics required_pkgs tidy
#' @importFrom recipes prep bake
#' @importFrom tibble tibble
## usethis namespace: end
NULL
```


# Dépendances sans dépendances


## Gérer les lignées taxonomiques

```{r}
data("cheese_taxonomy")

cheese_taxonomy %>% 
  select(asv, lineage)
```


## Gérer les lignées taxonomiques

![](img/logo_yatah.png){.absolute bottom="30" right="10" width=100 height=116}


```{r}
data("cheese_taxonomy")

cheese_taxonomy %>% 
  select(asv, lineage) %>% 
  mutate(order = yatah::get_clade(lineage, "order"),
         genus = yatah::get_clade(lineage, "genus")) 
```



## `step_taxonomy()`

```{r}
cheese_taxonomy %>% 
  recipe(~ asv + lineage) %>% 
  step_taxonomy(lineage, rank = c("order", "genus")) %>% 
  prep() %>% 
  bake(new_data = NULL)
```



## En temps normal

```{r}
#| eval: false
#| code-line-numbers: "1-9|4|6"
#' @importFrom yatah get_clade
bake.step_taxonomy <- function(object, new_data, ...) {
  ...
  new_col <- paste0(term, "_", rank)
  
  new_data[[new_col]] <- get_clade(new_data[[term]], rank = rank, same = FALSE)
  ...
  return(new_data)
}
```

. . .

<br>

* Besoin d'ajouter `{yatah}` dans les dépendances.


## Digression à propos de `call2()` et `eval_tidy()`

```{r}
head(fruit)
```

. . . 

```{r}
knitr::combine_words(head(fruit), and = " or ")
```

. . .

<br>

```{r}
#| message: false
library(rlang)
cl <- call2("combine_words", .ns = "knitr",
            words = head(fruit), and = " or ")
cl
```

. . .

```{r}
eval_tidy(cl)
```



## Sans dépendance


```{r}
#| eval: false
#| code-line-numbers: "1-10|6-7|8"
#' @importFrom rlang eval_tidy call2
bake.step_taxonomy <- function(object, new_data, ...) {
  ...
  new_col <- paste0(term, "_", rank)
  
  yatah_call <- call2("get_clade", .ns = "yatah", 
                      lineage = new_data[[term]], rank = rank, same = TRUE)
  new_data[[new_col]] <- eval_tidy(yatah_call)
  ...
  return(new_data)
}
```

. . .

<br>

* `{yatah}` n'est plus requis.

* `{rlang}` est déjà une dépendance de `{recipes}`. 


## `required_pkgs()` 

```{r}
required_pkgs.step_taxonomy <- function(x, ...) {
  c("yatah", "scimo")
}
```

<br>

* Vérifie si le package requis est installé.

* Charge correctement le package lors de calculs parallèles. 

* Utilisé aussi dans les autres étapes de `{scimo}`, et renvoie seulement `"scimo"`. 


# Outro

## Prochaines étapes

<br>

* Arguments optimisables. 

* Nouvelles étapes :

  * autres tests ([`limma`](https://bioinf.wehi.edu.au/limma/), [`DESeq2`](https://bioconductor.org/packages/release/bioc/html/DESeq2.html)...) pour la sélection de variables,
  
  * réduction de dimension avec [`PLNmodels`](https://pln-team.github.io/PLNmodels/),
  
  * étapes multi-omiques (comment définir les groupes avec `tidyselect`?).


## Pour aller plus loin

<br>

* Packages

  * [tidymodels](https://www.tidymodels.org/)
  
  * [recipes](https://recipes.tidymodels.org/)
  
  * [scimo](https://abichat.github.io/scimo/)
  
* Livre

  * [Tidy Modeling with R](https://www.tmwr.org/)
  
* Vignette

  * [Create your own recipe step function](https://www.tidymodels.org/learn/develop/recipes/)


## Un grand merci !

<br>


:::: {.columns}

::: {.column width="30%"}

:::

::: {.column width="50%"}

<div style = "margin-top: 0.4em"></div>

::: {.center-h}
**Julie Aubert**
:::

::: {.center-h}
pour les idées, discussions et contributions
:::

:::

::: {.column width="10%"}
<img class="circular-square" src="img/julie.jpeg" />
:::

::: {.column width="10%"}

:::

::::


:::: {.columns}

::: {.column width="10%"}

:::

::: {.column width="10%"}
<img class="circular-square" src="img/emil.png" />
:::

::: {.column width="45%"}

<div style = "margin-top: 0.4em"></div>

::: {.center-h}
**Emil Hvitfeldt**
:::

::: {.center-h}
pour la relecture et les tickets ouverts
:::

:::

::: {.column width="35%"}

:::

::::


:::: {.columns}

::: {.column width="45%"}

:::

::: {.column width="25%"}

<div style = "margin-top: 0.4em"></div>

::: {.center-h}
**Sylvain Jonchery**
:::

::: {.center-h}
pour le logo
:::


:::

::: {.column width="10%"}
![](img/logo_scimo.png)
:::

::: {.column width="20%"}

:::

::::


  

## {.servier-end}
